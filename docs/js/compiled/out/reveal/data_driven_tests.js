// Compiled by ClojureScript 1.9.946 {}
goog.provide('reveal.data_driven_tests');
goog.require('cljs.core');
goog.require('clojure.string');
reveal.data_driven_tests.detab = (function reveal$data_driven_tests$detab(s){
return clojure.string.trim.call(null,clojure.string.replace.call(null,s,/\n    /,"\n"));
});
reveal.data_driven_tests.clojure_are_example = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"section","section",-300141526),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"p","p",151049309),"clojure.test"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"pre","pre",2118456869),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"code","code",1586293142),"(require '[com.example.battle :as sut])\n\n(deftest test-battle-results\n  (are [num-sheep num-wolves expected-winner-type]\n      (let [sheep (repeat num-sheep {:animal/type :sheep})\n            wolves (repeat num-wolves {:animal/type :wolf})\n            battle-royale (concat sheep wolves)\n            winner (sut/fight battle-royale)]\n        (= expected-winner-type (:animal/type winner)))\n    10   1 :wolf\n    100  1 :wolf\n    1    0 :sheep\n    0    1 :wolf\n    9001 1 :sheep))"], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"pre","pre",2118456869),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"code","code",1586293142),"(deftest empty-battle-throws-exception\n  (is (thrown? Exception (sut/fight []))))"], null)], null)], null);
reveal.data_driven_tests.class_declaration = "//imports and packaging\n@RunWith(Parameterized.class)\npublic class FancyTest {";
reveal.data_driven_tests.parameterization = "\n    @Parameterized.Parameters(name = \n     \"Battle with {0} sheep, {1} wolves, expected winner: {2}\")\n    public static Iterable&lt;Object[]&gt; data() {\n        return Arrays.asList(new Object[][] {\n            {10, 1, AnimalType.WOLF},\n            {100, 1, AnimalType.WOLF},\n            {1, 0, AnimalType.SHEEP},\n            {0, 1, AnimalType.WOLF},\n            {9001, 1, AnimalType.SHEEP},\n            //luckily, trailing commas are allowed\n        }\n    }\n";
reveal.data_driven_tests.vars_and_ctor = "\n    private final int numSheep;\n    private final int numWolves;\n    private final AnimalType expectedWinnerType;\n\n    public FancyTest(int numSheep, int numWolves, AnimalType expectedWinnerType) {\n        this.numSheep = numSheep;\n        this.numWolves = numWolves;\n        this.expectedWinner = expectedWinnerType;\n    }\n";
reveal.data_driven_tests.mocking = "\n    @Before\n    public void setUp() {\n        SomeService mocked = mock(SomeService.class);\n        List&lt;BattlefieldCondition&gt; conditions = new ArrayList<>();\n        conditions.add(BattlefieldCondition.DAY);\n        when(mocked.getBattlefieldConditions()).thenReturn(conditions);\n        when(mocked.getDistance(any(Location.class),\n                                any(Location.class)))\n            .thenReturn(100);\n        battleManager = new BattleManager(mocked);\n    }\n";
reveal.data_driven_tests.actual_test = "\n    public void testBattleResults() {\n        List&lt;Animal> sheep = new ArrayList<>();\n        for(int i = 0; i < numSheep; i++) {\n            sheep.add(Animal.ofType(AnimalType.SHEEP));\n        }\n  \n        List&lt;Animal> wolves = new ArrayList<>();\n        for(int i = 0; i < numWolves; i++) {\n            wolves.add(Animal.ofType(AnimalType.WOLF));\n        }\n  \n        List&lt;Animal> battleRoyale = new ArrayList<>();\n        battleRoyale.addAll(sheep);\n        battleRoyale.addAll(wolves);\n        \n        Animal winner = battleManager.fight(battleRoyale);\n\n        assertEquals(expectedWinnerType, winner.getType());\n    }\n";
reveal.data_driven_tests.all_together = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"pre.stretch","pre.stretch",967691624),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"font-size: 8.4px"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"code.java","code.java",890802862),[cljs.core.str.cljs$core$IFn$_invoke$arity$1(reveal.data_driven_tests.class_declaration),"\n    private BattleManager battleManager;\n",cljs.core.str.cljs$core$IFn$_invoke$arity$1(reveal.data_driven_tests.parameterization),cljs.core.str.cljs$core$IFn$_invoke$arity$1(reveal.data_driven_tests.vars_and_ctor),cljs.core.str.cljs$core$IFn$_invoke$arity$1(reveal.data_driven_tests.mocking),cljs.core.str.cljs$core$IFn$_invoke$arity$1(reveal.data_driven_tests.actual_test),"\n}"].join('')], null)], null);
reveal.data_driven_tests.clj_mock = "\n(def mocked-service \n  (reify SomeService\n    (getBattleFieldConditions [this] [BattlefieldCondition/DAY])\n    (getDistance [this _ _] 100)))";
reveal.data_driven_tests.clj_all_together = ["(import '[com.example.battle BattleManager SomeService AnimalType Animal])\n  ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(reveal.data_driven_tests.clj_mock),"\n\n(def battle-manager (BattleManager. mocked-service))\n\n(defn animal-list [n animal-type]\n  (repeatedly n #(Animal/ofType animal-type)))\n\n(deftest test-battle-results\n  (are [num-sheep num-wolves expected-winner-type]\n      (let [sheep (animal-list num-sheep AnimalType/SHEEP)\n            wolves (animal-list num-wolves AnimalType/WOLF)\n            battle-royale (concat sheep wolves)\n            winner (.fight battle-manager battle-royale)]\n        (= expected-winner-type (.getType winner)))\n    10   1 AnimalType/WOLF\n    100  1 AnimalType/WOLF\n    1    0 AnimalType/SHEEP\n    0    1 AnimalType/WOLF\n    9001 1 AnimalType/SHEEP))"].join('');
reveal.data_driven_tests.data_driven_tests_slides = new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"section","section",-300141526),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"h5","h5",-1829156625),"Data-Driven Tests"], null),reveal.data_driven_tests.clojure_are_example,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"section","section",-300141526),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"h2","h2",-372662728),"JUnit 4 Parameterized Tests"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"mini","mini",1024876972),"Heavy inspiration from ",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"a","a",-2123407586),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"href","href",-793805698),"https://automationrhapsody.com/data-driven-testing-junit-parameterized-tests/"], null),"https://automationrhapsody.com/data-driven-testing-junit-parameterized-tests/"], null)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"section","section",-300141526),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"p","p",151049309),"Parameterization"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"pre","pre",2118456869),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"code.java","code.java",890802862),reveal.data_driven_tests.detab.call(null,reveal.data_driven_tests.parameterization)], null)], null)], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"section","section",-300141526),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"p","p",151049309),"Fancy Runner class"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"pre","pre",2118456869),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"code.java","code.java",890802862),reveal.data_driven_tests.class_declaration], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"pre","pre",2118456869),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"width: 1003px"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"code.java","code.java",890802862),reveal.data_driven_tests.detab.call(null,reveal.data_driven_tests.vars_and_ctor)], null)], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"section","section",-300141526),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"p","p",151049309),"Mock a little",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"pre","pre",2118456869),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"width: 1003px"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"code.java","code.java",890802862),reveal.data_driven_tests.detab.call(null,reveal.data_driven_tests.mocking)], null)], null)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"section","section",-300141526),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"p","p",151049309),"Actual Test Code"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"pre.stretch","pre.stretch",967691624),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"code.java","code.java",890802862),reveal.data_driven_tests.detab.call(null,reveal.data_driven_tests.actual_test)], null)], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"section","section",-300141526),reveal.data_driven_tests.all_together], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"section","section",-300141526),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"p","p",151049309),"clojure.test + interop"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"aside.notes","aside.notes",1608551352),"there are mock libraries that can do the reify line"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"aside.notes","aside.notes",1608551352),"sequences can be used as java.util.Lists"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"pre.stretch","pre.stretch",967691624),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"style","style",-496642736),"font-size: 18px"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"code","code",1586293142),reveal.data_driven_tests.clj_all_together], null)], null)], null)], null);

//# sourceMappingURL=data_driven_tests.js.map?rel=1539948882205
